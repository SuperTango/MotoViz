<!doctype html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>MotoViz</title>
    <link rel="stylesheet" href="/css/style.css" />
    <link rel="stylesheet" href="/css/flexigrid.pack.css" />

<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />

<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false">
</script>

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"></script>
<script type="text/javascript" src="<% ui_url%>/Highcharts-2.1.6/js/highcharts.src.js"></script>
<script type="text/javascript" src="<% ui_url%>/Highcharts-2.1.6/js/themes/grid.js"></script>
<script type="text/javascript" src="<% ui_url%>/Highcharts-2.1.6/js/modules/exporting.js"></script>
<script type="text/javascript" src="<% ui_url%>/javascripts/jquery.sprintf.js"></script>
<script type="text/javascript" src="<% ui_url%>/javascripts/flexigrid.pack.js"></script>

<style type="text/css">
html { 
    height: 100% 
}
body { 
    height: 100%; 
    margin: 0; 
    padding: 0 
}
.splitterContainer {
    height: 100%
}
div#container{
    width: 100%;
    height: 38%;
}
div#table_container{
    width: 30%;
    height: 100%;
    float: left;
}
div#chart_container{
    width: 70%;
    height: 100%;
    float: left;
}
div#map_canvas{
    width: 100%;
    height: 60%;
}
th {
    text-align:right;
}

tr.alt td {
    background: #EEEEEE;
}
tr.over td {
    background: #FFEEEE;
}

td.th_title {
    text-align: right;
    font-weight: bold;
}

#table_container {
    background: #FFFFFF;
}

table {
    font-family: helveticaneue-light, "helvetica neue light", "helvetica neue", sans-serif;
    font-size: 12px;
    border: 0;
    padding: 0;
    margin: 15;
}

td {
    padding: 0;
}
</style>

<script type="text/javascript">

var chart;
var ride_info;
var map;
var points_data;
var pointMarker;
var coordsHash;
var selectingLine = new google.maps.Polyline ( {
    strokeColor: "#FF00FF",
    strokeOpacity: 1.0,
    strokeWeight: 4,
    zIndex: 99,
} );
var selectedLine = new google.maps.Polyline ( {
    strokeColor: "#00FF00",
    strokeOpacity: 1.0,
    strokeWeight: 6,
    zIndex: 98,
} );
//var segmentRectangle;

var fields = new Array (
    { metric: 'battery_volts', name: "Volts" },
    { metric: 'battery_amps', name: 'Current' },
    { metric: 'watts', name: 'Power' },
    { metric: 'wh', name: 'WattHours' },
    { metric: 'whPerMile', name: 'WattHours/Mile' },
    { metric: 'milesPerKWh', name: 'Miles/KWattHour' },
    { metric: 'speed_gps', name: 'Speed(GPS)' },
    { metric: 'speed_sensor', name: 'Speed(Sensor)' } );

// binary search algorithm mostly lifted from 
// http://www.dweebd.com/javascript/binary-search-an-array-in-javascript/
function binarySearch ( arr, find ) {
    var low = 0;
    var high = arr.length - 1;
    var i;
    var comparison;
    while (low <= high) {
        i = Math.floor((low + high) / 2);
        comparison = arr[i] -  find;
        if ( comparison < 0 ) { 
            low = i + 1; 
            continue; 
        };
        if ( comparison > 0 ) { 
            high = i - 1; 
            continue;
        };
        //console.log ( "returning i: " + i );
        return i;
    }
    //console.log ( "returning i: " + i );
    return i;
};

function resetChartSelection() {
    setStartEnd ( 0, points_data.time.length, null, true, true );
    selectedLine.setMap ( null );
    selectingLine.setMap ( null );
    chart.$resetButton.remove();
}

function onChartSelecting ( event ) {
    var indexStart = binarySearch ( points_data.time, event.pointStart / 1000 );
    var index = binarySearch ( points_data.time, event.point / 1000 );
    setStartEnd ( indexStart, index, selectingLine, false, false );
    //var markerPoint = points_data.coords[index];
    //console.log ( $.sprintf ( "indexStart: %d, index: %d, markerPoint next line", indexStart, index ) )
    //console.log ( markerPoint );
    pointMarker.setPosition ( points_data.coords[index] );
    pointMarker.setVisible ( true );
}

function onChartSelectFinished(event) {
    var chart = this;
    selecting = false;
    selectingLine.setMap ( null );
    
    if (event.xAxis) {
        var xAxis = event.xAxis[0],
        min = xAxis.min / 1000,
        max = xAxis.max / 1000;
        if ( min != max ) {
            document.getElementById ( 'table_time_value' ).firstChild.data = "FOO";
            var start = binarySearch ( points_data.time, min );
            var end = binarySearch ( points_data.time, max );
            //console.log ( "min: %f, start: %d, max: %f, end: %d", min, start, max, end );
            setStartEnd ( start, end, selectedLine, true, true );
        }

        // use jQuery HTML capabilities to add a button to reset the selection 
        chart.$resetButton = $('<button>Reset view</button>')
                .css({
                        position: 'absolute',
                        top: '30px',
                        right: '70px',
                        zIndex: 50
                })
                .click(function() {
                        resetChartSelection();
                })
                .appendTo(chart.container);
        
        // indicate to the user that something's going on
        //chart.showLoading();
        
        /*
        // request the data - see http://api.jquery.com/jQuery.get/
        $.get('drilldown-data.php', {
            min: Math.round(min),
            max: Math.round(max)
        }, function(drillDownData) {
            onGetNewData(chart, drillDownData);				
        }, 'json');
        */
        
        return false;
    }
}

function convertSecondsToHuman ( seconds ) {
    var humanString = "";
    humanString += $.sprintf ( '%02d', Math.floor ( seconds / 3600 ) );
    humanString += ':';
    seconds -= Math.floor ( seconds / 3600 ) * 3600;

    humanString += $.sprintf ( '%02d', Math.floor ( seconds / 60 ) );
    humanString += ':';
    seconds -= Math.floor ( seconds / 60 ) * 60;

    humanString += $.sprintf ( '%02d', seconds );
    return humanString;
}

function sortBySeriesName ( a, b ) {
    if ( a.name < b.name ) {
        return -1;
    } 

    if ( a.name > b.name ) {
        return 1;
    }
    return 0;
}

function setStartEnd ( start, end, mapLine, updateMapBounds, updateChart ) {
    if ( start == end ) {
        mapLine.setMap ( null );
        return;
    }
    if ( end < start ) {
        var tmp = start;
        start = end;
        end = tmp;
    }
    var limitPoints = 50;
    var lastInt = -1;
    var should_fetch;
    var mod = ( end - start ) / limitPoints;
    var seriesHash = {};
    var ride_info2 = {
        lat_min: 1000,
        lat_max: -1000,
        lon_min: 1000,
        lon_max: -1000,
        speed_gps_max: Number.MIN_VALUE,
        speed_sensor_max: Number.MIN_VALUE,
        distance_gps_total: 0,
        distance_sensor_total: 0,
        current_max: Number.MIN_VALUE,
        current_min: Number.MAX_VALUE,
        power_max: Number.MIN_VALUE,
        power_min: Number.MAX_VALUE,
        volts_max: Number.MIN_VALUE,
        volts_min: Number.MAX_VALUE,
        wh_used: 0,
        wh_regen: 0,
    };

    $.each ( fields, function ( index, value ) {
        seriesHash[value.metric] = new Array();
    } );

    for ( var i = start; i < end; i++ ) {

        if ( ! ride_info2.time_start ) {
            ride_info2.time_start = points_data.time[i];
        }
        ride_info2.time_end = points_data.time[i];

            // calc map bounds
        if ( points_data.lat[i] < ride_info2.lat_min ) {
            ride_info2.lat_min = points_data.lat[i];
        }
        if ( points_data.lon[i] < ride_info2.lon_min ) {
            ride_info2.lon_min = points_data.lon[i];
        }
        if ( points_data.lat[i] > ride_info2.lat_max ) {
            ride_info2.lat_max = points_data.lat[i];
        }
        if ( points_data.lon[i] > ride_info2.lon_max ) {
            ride_info2.lon_max = points_data.lon[i];
        }

            // calc max/mins
        if ( points_data.speed_gps[i] > ride_info2.speed_gps_max ) {
            ride_info2.speed_gps_max = points_data.speed_gps[i];
        }
        if ( points_data.speed_sensor[i] > ride_info2.speed_sensor_max ) {
            ride_info2.speed_sensor_max = points_data.speed_sensor[i];
        }
        ride_info2.distance_gps_total += points_data.distance_gps_delta[i];
        ride_info2.distance_sensor_total += points_data.distance_sensor_delta[i];

        if ( points_data.battery_amps[i] < ride_info2.current_min ) {
            ride_info2.current_min = points_data.battery_amps[i];
        }
        if ( points_data.battery_amps[i] > ride_info2.current_max ) {
            ride_info2.current_max = points_data.battery_amps[i];
        }
        if ( points_data.battery_volts[i] < ride_info2.volts_min ) {
            ride_info2.volts_min = points_data.battery_volts[i];
        }
        if ( points_data.battery_volts[i] > ride_info2.volts_max ) {
            ride_info2.volts_max = points_data.battery_volts[i];
        }
        if ( points_data.watts[i] < ride_info2.power_min ) {
            ride_info2.power_min = points_data.watts[i];
        }
        if ( points_data.watts[i] > ride_info2.power_max ) {
            ride_info2.power_max = points_data.watts[i];
        }
        if ( points_data.wh[i] > 0 ) {
            ride_info2.wh_used += points_data.wh[i];
        } else {
            ride_info2.wh_regen -= points_data.wh[i];
        }


            // Now calculate which points to put in the graph
        var tmp = Math.floor ( i / mod );
        if ( tmp != lastInt ) {
            should_fetch = true;
            lastInt = tmp;
        } else {
            should_fetch = false;
        }

        if ( should_fetch ) {
            $.each ( fields, function ( index, value ) {
                if ( ! seriesHash[value.metric] ) {
                    seriesHash[value] = new Array();
                }
                seriesHash[value.metric].push ( [ points_data.time[i] * 1000, points_data[value.metric][i] ] );
            } );
        }

    }
    //console.log ( ride_info2 );
    ride_info2.date_start = new Date ( ride_info2.time_start * 1000 ).toLocaleString();
    ride_info2.date_end = new Date ( ride_info2.time_end * 1000 ).toLocaleString();
    ride_info2.time_duration = convertSecondsToHuman ( ride_info2.time_end - ride_info2.time_start );
    ride_info2.wh_total = ride_info2.wh_used - ride_info2.wh_regen;
    ride_info2.whPerMile = ride_info2.wh_total / ride_info2.distance_gps_total;
    ride_info2.milesPerKWh = ride_info2.distance_gps_total / ride_info2.wh_total * 1000;

    document.getElementById ( 'table_time_value' ).firstChild.data = ride_info2.date_start;
    document.getElementById ( 'table_duration_value' ).firstChild.data = ride_info2.time_duration;
    document.getElementById ( 'table_distance_value' ).firstChild.data = $.sprintf ( "%.03f mi", ride_info2.distance_gps_total );
    document.getElementById ( 'table_power_value' ).firstChild.data = $.sprintf ( "%.03f W(min) / %.03f W(max)", ride_info2.power_min, ride_info2.power_max );
    document.getElementById ( 'table_volts_value' ).firstChild.data = $.sprintf ( "%.03f / %.03f", ride_info2.volts_min, ride_info2.volts_max );
    document.getElementById ( 'table_current_value' ).firstChild.data = $.sprintf ( "%.03f / %.03f", ride_info2.current_min, ride_info2.current_max );
    document.getElementById ( 'table_wh_value' ).firstChild.data = $.sprintf ( "%.03f / %.03f / %.03f", ride_info2.wh_used, ride_info2.wh_regen, ( ride_info2.wh_used - ride_info2.wh_regen ) );
    document.getElementById ( 'table_whPerMile_value' ).firstChild.data = $.sprintf ( "%.03f", ride_info2.whPerMile );
    document.getElementById ( 'table_milesPerKWh_value' ).firstChild.data = $.sprintf ( "%.03f", ride_info2.milesPerKWh );
    /*
    $(".flexme3").flexigrid({
        height: 500,
    });
    console.log ( $(".flexme3" ) );
    */


/*
    if ( segmentRectangle ) {
        segmentRectangle.setMap ( null );
    }

    segmentRectangle = new google.maps.Rectangle ( {
        bounds: bounds,
        strokeColor: "#FF00FF",
        strokeOpacity: 1.0,
        strokeWeight: 2
    } );
    segmentRectangle.setMap ( map );
*/
    if ( mapLine && ( ( start != 0 ) || ( end != points_data.time.length ) ) ) {
        var rideCoords = new Array();
        for ( var i = start; i <= end; i++ ) {
            rideCoords.push ( points_data.coords[i] );
        }
        mapLine.setPath ( rideCoords );
        mapLine.setMap ( map );
    }

    if ( updateMapBounds ) {
            // set map bounds
        var bounds = new google.maps.LatLngBounds ( new google.maps.LatLng ( ride_info2.lat_min, ride_info2.lon_min ), new google.maps.LatLng ( ride_info2.lat_max, ride_info2.lon_max ) );
        map.fitBounds ( bounds );
    }

    if ( updateChart ) {
        var count = 0;
        $.each ( fields, function ( index, value ) {
            chart.series[count].setData ( seriesHash[value.metric] );
            count++;
        } );
    }
}

function processData() {
    //console.log ( 'Ride info: ' );
    //console.log ( ride_info );
    var rideCoords = new Array();
    var numGPSPoints = points_data.lat.length;
    coordsHash = {};
    var myOptions = {
        zoom: 1,
        mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);

    var whTotal = 0;

    points_data.coords = new Array();
    for ( var i = 0; i < numGPSPoints; i++ ) {
            // setup rideCoords, the line on the map
        var coord = new google.maps.LatLng ( points_data.lat[i], points_data.lon[i] );
        rideCoords.push ( coord );
            // setup coordsHash, which is used to translate from chart to map 
        var s = "X" + points_data.time[i] * 1000;
        coordsHash[s] = coord;
        points_data.coords[i] = coord;
    }


    var seriesArray = new Array();
    $.each ( fields, function ( index, value ) {
        seriesArray.push ( { type: 'line', name: value.name } );
    } );


/*
            for ( var metric in points_data ) {
                if ( ( metric == "lat" ) || ( metric == "lon" ) || ( metric == "bearing" ) ) {
                    continue;
                }
                if ( metric != "battery_amps" ) {
                    continue;
                }
                var series = { points_data: points_data[metric], type: 'line', name: metric };
                if ( metric == "altitude" ) {
                    series.yAxis = 1;
                } else if ( metric == "watts" ) {
                    series.yAxis = 2;
                } else if ( metric == "distance_gps_delta" ) {
                    series.yAxis = 3;
                }
                seriesArray.push ( series );
            }
            seriesArray.sort ( sortBySeriesName );
*/

    var rideLine = new google.maps.Polyline ( {
        path: rideCoords,
        strokeColor: "#FF0000",
        strokeOpacity: 1.0,
        strokeWeight: 2
    } );
    var startMarker = new google.maps.Marker ( {
        position: new google.maps.LatLng ( points_data.lat[0], points_data.lon[0] ),
        animation: google.maps.Animation.DROP,
        title: "Start",
        icon: "http://motoviz.funkware.com/images/motorcycle.png",

    });
    var endMarker = new google.maps.Marker ( {
        position: new google.maps.LatLng ( points_data.lat[numGPSPoints - 1], points_data.lon[numGPSPoints - 1] ),
        animation: google.maps.Animation.DROP,
        title: "End",
        icon: "http://motoviz.funkware.com/images/parking.png",
    });
    pointMarker = new google.maps.Marker( {
        map: map,
        visible: false } );

    chart = new Highcharts.Chart({
      chart: {
         renderTo: 'chart_container',
         zoomType: 'x',
         //spacingRight: 20,
         defaultSeriesType: 'line',
         events: {
            selection: onChartSelectFinished,
            selecting: onChartSelecting,
        },
      },
       title: {
         text: ''
      },
      /*
       subtitle: {
         text: document.ontouchstart === undefined ?
            'Click and drag in the plot area to zoom in' :
            'Drag your finger over the plot to zoom in'
      },
      */
      xAxis: {
         type: 'datetime',
         maxZoom: 30,
         title: {
            text: null
         }
      },
      plotOptions: {
          series: {
              marker: {
                  radius: 2
              }
          }
      },
      yAxis: [
        {
        }, 
        {
            title: {
                text: "Altitude (feet)",
            },
            opposite: true
        },
        {
            title: {
                text: "Voltage (watts)",
            },
            opposite: true,
        },
        {
            title: {
                text: "distance delta (miles)",
            },
        },
      ],
      tooltip: {
          shared: true,
          formatter: function() {
              var dateObj = new Date( this.x );

              var s = '<b>'+ dateObj.toString() +'</b>';
             
              $.each(this.points, function(i, point) {
                  s += '<br/>'+ point.series.name +': '+ point.y;
              });
              var index = "X" + this.x;
              //console.log ( index );
              pointMarker.setPosition ( coordsHash[index] );
              pointMarker.setVisible ( true );
              return s;
          },
          shared: true,
          crosshairs: true,
      },
      legend: {
         enabled: true
      },
      series: seriesArray
    });

    setStartEnd ( 0, numGPSPoints, null, true, true );
    $(".flexme3").flexigrid({
        height: 500,
    });
    //console.log ( $(".flexme3" ) );

        /*
         * google maps
         */
    rideLine.setMap ( map );
    startMarker.setMap ( map );
    endMarker.setMap ( map );
    google.maps.event.addListener(rideLine, 'click', function(event) {
        console.log ( event.latLng );
    });

    $(".zstripe tr:even").addClass("alt" );
    $(".zstripe tr").mouseover(function () {
        $(this).addClass("over")
    });
    $(".zstripe tr").mouseout(function () {
        $(this).removeClass("over")
    });
}

$(document).ready(function() {
    $.when ( 
        /*$.getJSON('<% ui_url %>/newpoints/<% user_id %>/<% ride_id %>/motoviz_output.out.meta', function(data) {
            ride_info = data;
            //alert ( ride_info.miles_per_kwh );
        }),*/
        $.getJSON('<% ui_url%>/v1/points_client/<% user_id %>/<% ride_id %>', function(data) {
            points_data = data;
        }))
        .then ( processData )
        .fail ( function() { alert ( 'one or more requests failed' ) } );
});
   
    </script>
</head>
<body>
    <div id="container">
        <div id="table_container">
            <table id="summary_table" class="zstripe">
                <tbody>
                    <tr>
                        <td class=th_title width="15%">Start:</td>
                        <td id=table_time_value>&nbsp;</td>
                    </tr>
                    <tr>
                        <td class=th_title>Duration:</td>
                        <td id=table_duration_value>&nbsp;</td>
                    </tr>
                    <tr>
                        <td class=th_title>Distance:</td>
                        <td id=table_distance_value>&nbsp;</td>
                    </tr>
                    <tr>
                        <td class=th_title>Power:</td>
                        <td id=table_power_value>&nbsp;</td>
                    </tr>
                    <tr>
                        <td class=th_title>Volts:</td>
                        <td id=table_volts_value>&nbsp;</td>
                    </tr>
                    <tr>
                        <td class=th_title>Current:</td>
                        <td id=table_current_value>&nbsp;</td>
                    </tr>
                    <tr>
                        <td class=th_title>WattHours (used/regen/total):</td>
                        <td id=table_wh_value>&nbsp;</td>
                    </tr>
                    <tr>
                        <td class=th_title>Wh/mile:</td>
                        <td id=table_whPerMile_value>&nbsp;</td>
                    </tr>
                    <tr>
                        <td class=th_title>miles/KWh:</td>
                        <td id=table_milesPerKWh_value>&nbsp;</td>
                    </tr>
                </tbody>
            </table>
            <script type="text/javascript">
            </script>
        </div>
        <div id="chart_container"></div>
    </div>
    <div id="map_canvas"></div>
<div id="footer">
<% IF session.user %>
    Logged in as <% session.user.name %>:  
    <a href="<% ui_url %>/rides">List Rides</a> |
    <a href="<% ui_url %>/new_upload">Upload Ride</a> |
    <a href="<% ui_url %>/update_registration">Update account</a> |
    <a href="<% ui_url %>/logout">Logout</a>
<% ELSE %>
    Not Logged In! <a href="<% ui_url %>/login">Login</a>
<% END %>
 | Powered by <a href="http://perldancer.org/">Dancer</a> <% dancer_version %>
</div>
  </body>
</html>

