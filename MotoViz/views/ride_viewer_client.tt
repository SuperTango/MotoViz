<!doctype html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>MotoViz</title>
    <link rel="stylesheet" href="/css/style.css" />

<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />

<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false">
</script>

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"></script>
<script type="text/javascript" src="<% ui_url%>/Highcharts-2.1.6/js/highcharts.js"></script>
<script type="text/javascript" src="<% ui_url%>/Highcharts-2.1.6/js/themes/grid.js"></script>
<script type="text/javascript" src="<% ui_url%>/Highcharts-2.1.6/js/modules/exporting.js"></script>

<style type="text/css">
html { 
    height: 100% 
}
body { 
    height: 100%; 
    margin: 0; 
    padding: 0 
}
.splitterContainer {
    height: 100%
}
div#container{
    width: 100%;
    height: 48%;
}
div#table_container{
    width: 30%;
    height: 100%;
    float: left;
}
div#chart_container{
    width: 70%;
    height: 100%;
    float: left;
}
div#map_canvas{
    width: 100%;
    height: 50%;
}
</style>

<script type="text/javascript">

var chart;
var ride_info;
var ride_info2 = {
    lat_min: 1000,
    lat_max: -1000,
    lon_min: 1000,
    lon_max: -1000,
};

var points_data;

function sortBySeriesName ( a, b ) {
    if ( a.name < b.name ) {
        return -1;
    } 

    if ( a.name > b.name ) {
        return 1;
    }
    return 0;
}

function processData() {
    console.log ( ride_info );
    var rideCoords = new Array();
    var numGPSPoints = points_data.lat.length;
    var coordsHash = {};
    var myOptions = {
        zoom: 1,
        mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    var map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);

    var limitPoints = 50;
    var seriesArray = new Array();
    var should_fetch = false;
    var mod = numGPSPoints / limitPoints;
    var lastInt = -1;
    var count = 0;
    var avgCount = 0;

    var seriesHash = {};

    var fields = new Array ( 
        { metric: 'battery_volts', name: "Volts" }, 
        { metric: 'battery_amps', name: 'Current' },
        { metric: 'watts', name: 'Power' },
        { metric: 'wh', name: 'WattHours' },
        { metric: 'whPerMile', name: 'WattHours/Mile' },
        { metric: 'milesPerKWh', name: 'Miles/KWattHour' },
        { metric: 'speed_gps', name: 'Speed(GPS)' },
        { metric: 'speed_sensor', name: 'Speed(Sensor)' } );

    $.each ( fields, function ( index, value ) {
        seriesHash[value.metric] = new Array();
    } );

    for ( var i = 0; i < numGPSPoints; i++ ) {
            // setup rideCoords, the line on the map
        var coord = new google.maps.LatLng ( points_data.lat[i], points_data.lon[i] );
        rideCoords.push ( coord );

            // setup coordsHash, which is used to translate from chart to map 
        var s = "X" + points_data.time[i] * 1000;
        coordsHash[s] = coord;

            // calc map bounds
        if ( points_data.lat[i] < ride_info2.lat_min ) {
            ride_info2.lat_min = points_data.lat[i];
        }
        if ( points_data.lon[i] < ride_info2.lon_min ) {
            ride_info2.lon_min = points_data.lon[i];
        }
        if ( points_data.lat[i] > ride_info2.lat_max ) {
            ride_info2.lat_max = points_data.lat[i];
        }
        if ( points_data.lon[i] > ride_info2.lon_max ) {
            ride_info2.lon_max = points_data.lon[i];
        }
            // Now calculate which points to put in the graph
        var tmp = Math.floor ( i / mod );
        if ( tmp != lastInt ) {
            //alert ( "i: " + i + ", tmp: " + tmp + ", lastInt: " + lastInt + ", setting should_fetch to true" );
            should_fetch = true;
            lastInt = tmp;
        } else {
            //alert ( "i: " + i + ", tmp: " + tmp + ", lastInt: " + lastInt + ", setting should_fetch to false" );
            should_fetch = false;
        }

        if ( should_fetch ) {
            $.each ( fields, function ( index, value ) {
                if ( ! seriesHash[value.metric] ) {
                    seriesHash[value] = new Array();
                }
                seriesHash[value.metric].push ( [ points_data.time[i] * 1000, points_data[value.metric][i] ] );
            } );
        }
    }
    console.log ( ride_info2 );

    $.each ( fields, function ( index, value ) {
        seriesArray.push ( { data: seriesHash[value.metric], type: 'line', name: value.name } );
    } );



/*
            for ( var metric in points_data ) {
                if ( ( metric == "lat" ) || ( metric == "lon" ) || ( metric == "bearing" ) ) {
                    continue;
                }
                if ( metric != "battery_amps" ) {
                    continue;
                }
                var series = { points_data: points_data[metric], type: 'line', name: metric };
                if ( metric == "altitude" ) {
                    series.yAxis = 1;
                } else if ( metric == "watts" ) {
                    series.yAxis = 2;
                } else if ( metric == "distance_gps_delta" ) {
                    series.yAxis = 3;
                }
                seriesArray.push ( series );
            }
            seriesArray.sort ( sortBySeriesName );
*/


    var rideLine = new google.maps.Polyline ( {
        path: rideCoords,
        strokeColor: "#FF0000",
        strokeOpacity: 1.0,
        strokeWeight: 2
    } );
    var startMarker = new google.maps.Marker ( {
        position: new google.maps.LatLng ( points_data.lat[0], points_data.lon[0] ),
        animation: google.maps.Animation.DROP,
        title: "Start",
        icon: "http://motoviz.funkware.com/images/motorcycle.png",

    });
    var endMarker = new google.maps.Marker ( {
        position: new google.maps.LatLng ( points_data.lat[numGPSPoints - 1], points_data.lon[numGPSPoints - 1] ),
        animation: google.maps.Animation.DROP,
        title: "End",
        icon: "http://motoviz.funkware.com/images/parking.png",
    });
    var pointMarker = new google.maps.Marker( {
        map: map,
        visible: false } );

    chart = new Highcharts.Chart({
      chart: {
         renderTo: 'chart_container',
         zoomType: 'x',
         //spacingRight: 20,
         defaultSeriesType: 'spline',
      },
       title: {
         text: '<% title %>'
      },
       subtitle: {
         text: document.ontouchstart === undefined ?
            'Click and drag in the plot area to zoom in' :
            'Drag your finger over the plot to zoom in'
      },
      xAxis: {
         type: 'datetime',
         maxZoom: 30,
         title: {
            text: null
         }
      },
      plotOptions: {
          series: {
              marker: {
                  radius: 2
              }
          }
      },
      yAxis: [
        {
        }, 
        {
            title: {
                text: "Altitude (feet)",
            },
            opposite: true
        },
        {
            title: {
                text: "Voltage (watts)",
            },
            opposite: true,
        },
        {
            title: {
                text: "distance delta (miles)",
            },
        },
      ],
      tooltip: {
          shared: true,
          formatter: function() {
              var dateObj = new Date( this.x );

              var s = '<b>'+ dateObj.toString() +'</b>';
             
              $.each(this.points, function(i, point) {
                  s += '<br/>'+ point.series.name +': '+ point.y;
              });
              var index = "X" + this.x;
              //alert ( index );
              pointMarker.setPosition ( coordsHash[index] );
              pointMarker.setVisible ( true );
              return s;
          },
          shared: true,
          crosshairs: true,
      },
      legend: {
         enabled: true
      },
      series: seriesArray
    });
    console.log ( chart );

            /*
             * google maps
             */
        map.fitBounds ( new google.maps.LatLngBounds ( new google.maps.LatLng ( ride_info2.lat_min, ride_info2.lon_min ), new google.maps.LatLng ( ride_info2.lat_max, ride_info2.lon_max ) ) );
        rideLine.setMap ( map );
        startMarker.setMap ( map );
        endMarker.setMap ( map );
}



$(document).ready(function() {
    $.when ( 
        $.getJSON('<% ui_url %>/newpoints/<% user_id %>/<% ride_id %>/motoviz_output.out.meta', function(data) {
            ride_info = data;
            //alert ( ride_info.miles_per_kwh );
        }),
        $.getJSON('<% ui_url%>/newpoints/<% user_id %>/<% ride_id %>/motoviz_output.out.client.json', function(data) {
            points_data = data;
        }))
        .then ( processData )
        .fail ( function() { alert ( 'one or more requests failed' ) } );
});
   
    </script>
</head>
<body>
    <div id="container">
        <div id="table_container">table</div>
        <div id="chart_container">chart</div>
    </div>
    <div id="map_canvas"></div>
<div id="footer">
<% IF session.user %>
    Logged in as <% session.user.name %>:  
    <a href="<% ui_url %>/rides">List Rides</a> |
    <a href="<% ui_url %>/new_upload">Upload Ride</a> |
    <a href="<% ui_url %>/update_registration">Update account</a> |
    <a href="<% ui_url %>/logout">Logout</a>
<% ELSE %>
    Not Logged In! <a href="<% ui_url %>/login">Login</a>
<% END %>
 | Powered by <a href="http://perldancer.org/">Dancer</a> <% dancer_version %>
</div>
  </body>
</html>

